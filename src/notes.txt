By just mentioning database name in config.json, it will not create a database for us. W have run "sequelize db:create". It create database specified by configuration.

We just have to do is -

sequelize init
make the configuration changes
sequelize db:create

--------------------------------------------------------------------------------------------------------------------------------------------------

Every Table is considered as a Model. To create a table, we have to create a Model.
We can create a model by using npx sequelize model:generate. It generates a model and its migration. We can also do model:create.
We have to use a flag (--name) to name the table or model -> npx sequelize db:generate --name Airplane.
To give a column name we use (--attributes <name>:<type>,<name2>:<type>) flag -> 
npx sequelize db:generate --name Airplane --attributes modelNumber:string,capacity:integer

In RDBMS -> attributes are column and tuples are rows.

npx sequelize db:generate --name Airplane --attributes modelNumber:string,capacity:integer

When we run the above command it created two files -> a model file and a migration file.

----------------------------------------------------------------------------------------------------------------------------------------------------

In model file, to add some additional constraint we will wrap it inside an object.
eg - > Airplane.init({
    modelNumber : {
        type: DataTypes.STRING,
        allowNull:false
    },
    capacity: DataTypes.INTEGER
})

----------------------------------------------------------------------------------------------------------------------------------------------------

npx sequelize db:generate --name Airplane --attributes modelNumber:string,capacity:integer

After running above command it does not create the table in database, it only creates a model file and a migration file.

Migration files are more or less are like our versions in our table.

Migration files tells us that in the next commit, these are the changes that will actually happen. 

Changes are going to be according to the up function of migration file.

up function has await queryInterface, queryInterface means if we dont use sequelize or we dont want to use ORM and you want to by default in a raw fashion connect to mysql, then we need to actually setup a queryInterface object that will actually connect to mysql and we'll write raw queries, but because we are using sequelize, it does this query interfacing automatically.

I only added the modelNumber and capacity, but sequelize automatically knows that no matter what you will definately need an id property that will be a primary key that should not be null, it should be autoIncrement true and it should be of type Integer. Therefore sequelize automatically created an id property, createdAt property and updatedAt property automatically inside the migration file.

Sequelize is showing in the next model commit, there will be a table created with all of this properties in migration file.

----------------------------------------------------------------------------------------------------------------------------------------------------

We added some constraint in model file, but we should add those constraint in the migration file also because sequelize tells us that there are two level constraint - javascript level and database level. If you will add constraint only in model file than it will be of javascript level only and if you add those constraint in migration file also than those constraint will be of database level i.e, when the table will be created that table will also be having those constraints.

If somebody is inserting some data directly in database then you definitely want database level constraint and if you are sure no one can ever directly enter anything in the database than this javascript level constraint is enough.

----------------------------------------------------------------------------------------------------------------------------------------------------

In order to make the commit or make the changes or make the changes do -> npx sequelize db:migrate.

When we do npx sequelize db:migrate, it applies all the pending migrations. Sequelize tracks all the pending migrations using the uniqe migration number that is written in the file name of migration file.

If you want to undo a migration do -> npx sequelize db:migrate:undo. It will revert back everything.

----------------------------------------------------------------------------------------------------------------------------------------------------
Table name should be plural and Model name should be singular.
----------------------------------------------------------------------------------------------------------------------------------------------------
When we add a migration async up function of migration file applies and when we undo a migration async down function of migration file gets applies.
----------------------------------------------------------------------------------------------------------------------------------------------------
async down function says drop the table. In undo migration we lose the data because we are droping the table.
----------------------------------------------------------------------------------------------------------------------------------------------------
If you make any changes in model file than changes will be done in javascript level. If you make any changes in migration file than changes will be done in database level.
----------------------------------------------------------------------------------------------------------------------------------------------------
Controllers should never directly talk to model, services have business logic they should never talk to modal directly. Repository talk to modal directly. We will make a generic crud in Repository and we will use that crud operations again and again instead of writing crud everytime. This crud Repository help us in avoiding lot of redundant code.

Controllers pass on the call to services, services uses Repositories to interact with the model.
----------------------------------------------------------------------------------------------------------------------------------------------------
If we want to insert some data in mysql we do Insert into <TABLE_NAME> <COLUMNS> <VALUES>, if we want to do this in mysql we do -> 
<MODEL_NAME>.create(data). data will be an object. await Product.create({name:"iPhone"})
----------------------------------------------------------------------------------------------------------------------------------------------------
If we want to delete some data we use <MODEL_NAME>.destroy({where:{id:data}}), if we want to use where clause in sequelize we write where clause inside an object. where query always goes inside an object. Then whatever is the condition we put inside an object.
{where:{id:data}}
----------------------------------------------------------------------------------------------------------------------------------------------------
If we want to select all the data on the basis of primary key do -> <MODEL_NAME>.findByPK(data). It returns only an single record.
----------------------------------------------------------------------------------------------------------------------------------------------------
If we want to select all the data from the table do -> <MODEL_NAME>.findAll(). We can also write a where clause in findAll({where:{id:data}})
----------------------------------------------------------------------------------------------------------------------------------------------------
findByPK() always gives a unique record and findAll gives an array o record.
----------------------------------------------------------------------------------------------------------------------------------------------------
findOne() also gives us an single record but based on some other conditions.
----------------------------------------------------------------------------------------------------------------------------------------------------
To update, we use <MODEL_NAME>.update(id,{where:{
    id:id
}})
---------------------------------------------------------------------------------------------------------------------------------------------------
Creating an airplane is a POST request, data will be in request body.
POST: /airplane
req-body: {
    modelNumber:airbus320,
    capacity:200
}
---------------------------------------------------------------------------------------------------------------------------------------------------
By default, express does not know how to read request body. 
To read request body, Whenever there will be a incoming request, we have to mention that, in the incoming request if there is a request body, read it like a json. 
In earlier version of express, to achieve this, express used to have a inbuilt library.
Then after some versions of express they extracted out in a separate library named as body-parsor.
And after some backlash because they sagregate it in a separate library and people wanted it in the same library express, they brought it back inside express. Now you can see body=parsor is separate library also but technically we dont need body-parsor now.

Before you start registring any route, we do app.use(). app.use() is going to register a middleware for all upcoming routes that are mentioned below.

Do app.use(express.json()) and app.use(express.urlencoded({extented:true}))
---------------------------------------------------------------------------------------------------------------------------------------------------
Suppose we dont send capacity and modelNumber to request body then it will also create a model in this case because in model file both capacity and modelNumber have default value 0 and '' respectively. modelNumber ahould never have default value.

Nowif modelNumber does not have any default value and then you try to create a model then ot will give you the 500 internal server error. Technically the issue is not in our server, user sent the request without the modelNumber. This lies in the category of client error responses and bad request.

So we have to handle this as bad request "400 bad request" not as a "500 internal server error" because fault is not in our server it is on the client side because it is a bad request. User sent a request with invalid or incorrect data.
---------------------------------------------------------------------------------------------------------------------------------------------------
In order to handle that we can validate this request inside middleware. middleware has access to the request, response and next(). Inside middleware we will check if modelNumber is not present then we will send the response object with status code of 400 bad request and if modelNumber is present then we will call the next() function it will call the next() middleware. And next middleware will be the airplane controller.

But we not register this order, we will register this order in airplane-routes. In airplane-routes, when we call "/", we directly going to create airplane.
---------------------------------------------------------------------------------------------------------------------------------------------------
Instead of handling error everytime, we will create a Error class and whenever we want to throw an error we will create an object from that class.
---------------------------------------------------------------------------------------------------------------------------------------------------
Instead of writing error response object and success object again and again, we will define a generic success object and error object and we will use these object wherever we want to write the error object or success response object.
---------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------